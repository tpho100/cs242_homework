package master.address.view;

import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;

import java.io.*;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Optional;

import javafx.scene.control.*;
import javafx.scene.input.KeyEvent;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import master.address.model.FileEncryptor;
import master.address.model.SimpleEncryptor;

public class ChatWindowViewController {

    /*
    FXML references for UI components. Mostly generated by SceneBuilder.
     */
    @FXML
    private MenuItem connectButton;
    @FXML
    private MenuItem closeButton;
    @FXML
    private MenuItem encryptButton;
    @FXML
    private MenuItem decryptButton;
    @FXML
    private Button sendFile;
    @FXML
    private TextArea chatLog;
    @FXML
    private Button send;
    @FXML
    private TextArea textArea;

    /*
    Client ID parameters. Defaults to "UNKNOWN_USER" until
    user picks a new client name.
     */
    private String chatName = "UNKNOWN_USER";
    /*
    Server connection parameters.
    Two sockets. One for chat messages and one
    for file transfer.
     */
    final String hostName = "localhost";
    final int serverPort = 13699;
    final byte encryptionKey = 24;

    Socket chatSocket;
    Socket fileSocket;
    /*
    Streams for reading/writing data
     */
    PrintWriter writeMessageToServer;
    BufferedReader readMessageFromServer;

    Thread threadForMessages = new Thread(new Runnable() {
        /*
        This thread handles messages when the server starts shooting them
        back to the user. It immediately appends the messages to the chat window.
         */
        @Override
        public void run() {
            while (chatSocket != null) {
                String messageFromServer;
                try {
                    if ((messageFromServer = readMessageFromServer.readLine()) != null) {
                        SimpleEncryptor encryptor = new SimpleEncryptor();
                        chatLog.appendText(encryptor.textDecrypt(messageFromServer, encryptionKey) + "\n"); //This also handles newlines
                    }
                } catch (IOException e) {
                    //System.err.println("Error reading from server. Connection probably closed.");
                }
            }
        }
    });


    @FXML public void initialize(){
        /*
        Get username before launching the application.
         */
        TextInputDialog dialog = new TextInputDialog();
        dialog.setContentText("Enter chat username: ");
        dialog.setHeaderText("");
        dialog.setTitle("Username Query");
        Optional<String> result = dialog.showAndWait();

        if( result.isPresent() ){
            chatName = result.get();
        }
        else
        {
            System.out.println("Failed to get a username.");
            Platform.exit();
        }
    }

    private void closeEverything(){
        /*
        Closes off all streams.
         */
        try{
            writeMessageToServer.close();
            readMessageFromServer.close();
            chatSocket.close();
            chatSocket = null;
            threadForMessages.interrupt();

        }catch(Exception e){
        }
    }

    @FXML private void encryptButtonClicked(ActionEvent e){
        Stage stage = (Stage) send.getScene().getWindow();
        FileChooser fileChooser = new FileChooser();
        File file = fileChooser.showOpenDialog(stage);
        FileEncryptor encryptor = new FileEncryptor();
        try{
            encryptor.encryptFile(file.getName(),"encrypted_output1234.txt",encryptionKey);
        }catch(Exception ex){
        }
    }
    @FXML private void decryptButtonClicked(ActionEvent e){
        Stage stage = (Stage) send.getScene().getWindow();
        FileChooser fileChooser = new FileChooser();

        File file = fileChooser.showOpenDialog(stage);
        FileEncryptor encryptor = new FileEncryptor();
        try{
            encryptor.decryptFile(file.getName(),"decrypted_output1234.txt",encryptionKey);
        }catch(Exception ex){
        }
    }
    @FXML private void onCloseButtonClicked(ActionEvent e) {
        closeEverything();
        Platform.exit();
    }
    @FXML private void onConnectButtonClicked(ActionEvent e){

        if( chatSocket == null){
            // Don't try to connect again if already connected
            try{
                chatSocket = new Socket(hostName, serverPort);
                //System.out.println("Creating sockets using: hostname: " + hostName + " port: " + serverPort + " / " + filePort);

                writeMessageToServer = new PrintWriter(chatSocket.getOutputStream(),true);
                readMessageFromServer = new BufferedReader(new InputStreamReader(chatSocket.getInputStream()));

                /*
                Start queuing for server messages once connections are made.
                 */
                threadForMessages.start();

                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setTitle("Server Connection");
                alert.setHeaderText("CONNECTION INFO");
                alert.setContentText("Connection Successful!");
                alert.showAndWait();

            }catch(IOException ioe){
                Alert alert = new Alert(Alert.AlertType.WARNING);
                alert.setTitle("Server Connection");
                alert.setHeaderText("CONNECTION INFO");
                alert.setContentText("Connection Failed!");
                alert.showAndWait();
                System.err.println(ioe.getMessage());
            }
        }else
        {
            Alert alert = new Alert(Alert.AlertType.WARNING);
            alert.setTitle("Warning!");
            alert.setContentText("You're already connected!");
            alert.showAndWait();
        }
    }

    @FXML private void onSendButtonClicked(ActionEvent e){
        if(chatSocket == null){
            Alert alert = new Alert(Alert.AlertType.WARNING);
            alert.setTitle("Warning!");
            alert.setContentText("You're not connected yet. Please connect.");
            alert.showAndWait();
        }
        else{
            String message = String.valueOf(chatName + ": " + textArea.getText()); //Message is in the format username: message
            //Pass message to receiving end and let the server handle it
            SimpleEncryptor encryptor = new SimpleEncryptor();
            writeMessageToServer.println(encryptor.textEncrypt(message,encryptionKey));
        }
        textArea.clear();
    }
    @FXML private void onSendFileButtonClicked(ActionEvent e){
        Stage stage = (Stage) sendFile.getScene().getWindow();
        FileChooser fileChooser = new FileChooser();
        File file = fileChooser.showOpenDialog(stage);
        FileEncryptor encryptor = new FileEncryptor();
        try{
            ArrayList<String> fileContents = encryptor.getFileContents(file.getName());
            ArrayList<String> encryptedContents = encryptor.encryptContent(fileContents,encryptionKey);

            Thread t1 = new Thread(new Runnable() {
                @Override
                public void run() {
                    for(String line : encryptedContents){
                        writeMessageToServer.println(line);
                    }
                }
            });

            t1.start();
            sendFile.setDisable(true);
            textArea.setDisable(true);
            chatLog.appendText("SENDING FILE TO SERVER.\n");
            while(t1.isAlive()){

            }
            sendFile.setDisable(false);
            textArea.setDisable(false);

        }catch(Exception wtf){

        }
    }

    @FXML private void onEnterKey(KeyEvent k) {
        k.consume();
        if (k.getCode().toString().equals("ENTER")) {
            onSendButtonClicked(new ActionEvent());
        }

    }

}
