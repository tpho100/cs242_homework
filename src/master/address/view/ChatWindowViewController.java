package master.address.view;

import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;

import java.io.*;
import java.net.Socket;
import java.net.URL;
import java.util.Optional;
import java.util.ResourceBundle;

import javafx.scene.control.*;
import javafx.scene.input.KeyEvent;
import javafx.stage.FileChooser;
import master.address.model.SimpleEncryptor;

public class ChatWindowViewController {

    /*
    FXML references for UI components. Mostly generated by SceneBuilder.
     */
    @FXML
    private MenuItem connectButton;

    @FXML
    private MenuItem closeButton;

    @FXML
    private ResourceBundle resources;

    @FXML
    private URL location;

    @FXML
    private Button sendFile;

    @FXML
    private TextArea chatLog;

    @FXML
    private Button send;

    @FXML
    private TextArea textArea;

    /*
    UI Components for handling file I/O
     */
    private FileChooser fileChooser = new FileChooser();
    private File file;
    private SimpleEncryptor encryptor = new SimpleEncryptor();

    /*
    Client ID parameters. Defaults to "UNKNOWN_USER" until
    user picks a new client name.
     */
    private String chatName = "UNKNOWN_USER";

    /*
    Server connection parameters.
    Two sockets. One for chat messages and one
    for file transfer.
     */
    final String hostName = "localhost";
    final int chatPort = 13699;

    Socket chatSocket;
    Socket fileSocket;

    /*
    Streams for reading/writing data
     */
    PrintWriter outToServer;
    BufferedReader inToServer;

    DataInputStream dataInToServer;
    DataOutputStream dataOutToServer;

    /*
    Placeholders for incoming text/files
     */

    byte[] fileFromServer;
    byte[] fileFromUser;

    Thread threadForMessages = new Thread(new Runnable() {
        /*
        This thread handles messages when the server starts shooting them
        back to the user. It immediately appends the messages to the chat window.
         */
        @Override
        public void run() {
            while(chatSocket != null){
                String chatFromServer;
                try{
                    if( ( chatFromServer = inToServer.readLine() ) != null ){
                        chatLog.appendText(encryptor.textDecrypt(chatFromServer, (byte) 24) + "\n"); //This also handles newlines
                    }
                }catch(IOException e){
                    //System.err.println("Error reading from server. Connection probably closed.");
                }
            }
            //threadForMessages.interrupt(); //Kill the thread if the while loop somehow stops.
        }
    });

    Thread threadForFiles = new Thread(new Runnable() {
        /*
        This thread handles file transfers.
         */
        @Override
        public void run() {
            while(fileSocket != null){
                try{
                    Thread.sleep(100);
                }catch(Exception e){

                }
            }
            //threadForFiles.interrupt(); //Kill thread if while loop stops.
        }
    });

    @FXML
    public void initialize(){
        /*
        Get username before launching the application.
         */
        TextInputDialog dialog = new TextInputDialog();
        dialog.setContentText("Enter chat username: ");
        dialog.setHeaderText("");
        dialog.setTitle("Username Query");
        Optional<String> result = dialog.showAndWait();

        if( result.isPresent() ){
            chatName = result.get();
        }
        else
        {
            Platform.exit();
        }
    }

    private void closeEverything(){
        /*
        Closes off all streams.
         */
        try{
            outToServer.close();
            inToServer.close();

            dataOutToServer.close();
            dataInToServer.close();

            chatSocket.close();
            chatSocket = null;
            fileSocket.close();
            fileSocket = null;

            threadForMessages.interrupt();
            threadForFiles.interrupt();

        }catch(Exception e){
        }
    }

    @FXML
    private void onCloseButtonClicked(ActionEvent e) {
        closeEverything();
        Platform.exit();
    }

    @FXML
    private void onConnectButtonClicked(ActionEvent e){

        if( chatSocket == null || fileSocket == null){
            // Don't try to connect again if already connected
            try{
                chatSocket = new Socket(hostName, chatPort);
                fileSocket = new Socket(hostName, chatPort);
                //System.out.println("Creating sockets using: hostname: " + hostName + " port: " + chatPort + " / " + filePort);

                outToServer = new PrintWriter(chatSocket.getOutputStream(),true);
                inToServer = new BufferedReader( new InputStreamReader(chatSocket.getInputStream()) );

                dataInToServer = new DataInputStream( fileSocket.getInputStream() );
                dataOutToServer = new DataOutputStream( fileSocket.getOutputStream() );

                /*
                Start queuing for server messages once connections are made.
                 */
                threadForMessages.start();
                threadForFiles.start();

                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setTitle("Server Connection");
                alert.setHeaderText("CONNECTION INFO");
                alert.setContentText("Connection Successful!");
                alert.showAndWait();

            }catch(IOException ioe){
                System.err.println(ioe.getMessage());
            }
        }else
        {
            Alert alert = new Alert(Alert.AlertType.WARNING);
            alert.setTitle("Warning!");
            alert.setContentText("You're already connected!");
            alert.showAndWait();
        }
    }

    @FXML
    private void onSendButtonClicked(ActionEvent e){
        if(chatSocket == null){
            Alert alert = new Alert(Alert.AlertType.WARNING);
            alert.setTitle("Warning!");
            alert.setContentText("You're not connected yet. Please connect.");
            alert.showAndWait();
        }
        else{
            String message = String.valueOf(chatName + ": " + textArea.getText()); //Message is in the format username: message
            //Pass message to receiving end and let the server handle it
            outToServer.println(encryptor.textEncrypt(message,(byte) 24));
        }
        textArea.clear();
    }

    @FXML
    private void onSendFileButtonClicked(ActionEvent e){
        file = fileChooser.showOpenDialog(send.getScene().getWindow());

    }

    @FXML
    private void onEnterKey(KeyEvent k) {
        k.consume();
        if (k.getCode().toString().equals("ENTER")) {
            onSendButtonClicked(new ActionEvent());
        }

    }

}
